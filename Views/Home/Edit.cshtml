@using ResxWeb
@model ResxWeb.Models.ViewModels.Home.EditViewModel

@helper RenderTextArea(ResxKey resource, string culture)
{
    <text>
    @{
        var value = resource.Values.ContainsKey(culture) ? resource.Values[culture].Value : "";
        var isDefaultValue = !resource.Values.ContainsKey(culture) || !resource.Values[culture].HasChangedInDelta || string.IsNullOrEmpty(resource.Values[culture].Value);
        var canEdit = (Model.Resources.Any(x => x.RelativeFilePath == resource.RelativeFilePath && x.Values.ContainsKey(culture))) && (Model.CurrentUser.EditableCultures == null || !Model.CurrentUser.EditableCultures.Any() || Model.CurrentUser.EditableCultures.Contains(culture)); 
    }
    @if (canEdit)
    {
        <textarea class="translationTextBox@(isDefaultValue ? "" : " notDefaultValue")" name="@(resource.RelativeFilePath + "|" + resource.Key + "|" + culture)">@value</textarea>
    }
    else
    {
        <div class="translationText@(isDefaultValue ? "" : " notDefaultValue")">@value</div>
    }
    </text>
}

@{ var lineCount = 0; }
@using (Html.BeginForm())
{
    <text>
    <table>
        <tr>
            <th></th>
            @if (Model.CurrentUser.DisplayFile)
            {
                <th>File</th>
            }
            @if (Model.CurrentUser.DisplayKey)
            {
                <th>Key</th>
            }
            @foreach (var culture in Model.AvailableCultures)
            {
                <th>@(culture == "" ? "Default culture" : culture)</th>
            }
        </tr>
        @foreach (var resource in Model.Resources.OrderBy(x => x.RelativeFilePath).ThenBy(x => x.Key))
        {
            <text>
            <tr class="translationRow">
                <td><span class="fileOrKey">@(++lineCount)&nbsp;&nbsp;</span></td>
                @if (Model.CurrentUser.DisplayFile)
                {
                    <td><span class="fileOrKey">@resource.RelativeFilePath</span></td>
                }
                @if (Model.CurrentUser.DisplayKey)
                {
                    <td><span class="fileOrKey">@resource.Key</span></td>
                }
                @foreach (var culture in Model.AvailableCultures)
                {
                    <td>@RenderTextArea(resource, culture)</td>
                }
            </tr>
            </text>
        }
    </table>
    </text>
}

<div>
    @Html.ActionLink("Download merged RESX files", "Download", "Home", new { id = Model.CurrentSection }, null)
</div>

@section navigation
{
    <input type="button" value="Save" onclick="$('form').submit();" />
    <input type="radio" id="displayAll" name="displayGroup" checked="checked" /><label for="displayAll">Display all</label>
    <input type="radio" id="displayChanged" name="displayGroup" /><label for="displayChanged">Display changed only</label>
    <input type="radio" id="displayEmpty" name="displayGroup" /><label for="displayEmpty">Display empty only</label>
    <span id="count" style="padding-left: 20px;"></span>
}

@section scripts
{
    <script>
        $(document).ready(function() {

            function updateCount() {
                var total = $(".translationRow").length;
                var visible = $(".translationRow:visible").length;
                $("#count").html(visible + "/" + total);
            }

            function unifyTextAreaHeight(row) {
                var maxHeight = 0;
                $.each(row.find("textarea"), function(i, val) {

                    val.style.height = "auto";
                    var scrollHeight = val.scrollHeight;
                    val.style.height = scrollHeight + "px";

                    if (scrollHeight && scrollHeight > maxHeight) {
                        maxHeight = val.scrollHeight;
                    }
                });

                row.find("textarea").css("height", maxHeight + "px");
            }

            function updateTextAreaHeight(textarea) {
                $(textarea).get(0).style.height = "auto";
                $(textarea).get(0).style.height = $(textarea).get(0).scrollHeight + "px";
            }

            $("input[name=displayGroup]").change(function() {
                if ($("#displayAll").prop("checked")) {
                    $(".translationRow").show();
                } else if ($("#displayChanged").prop("checked")) {
                    $(".translationRow").each(function(i, row) {
                        row = $(row);
                        if (row.find(".notDefaultValue").length <= 0)
                            row.hide();
                        else
                            row.show();
                    });
                } else if ($("#displayEmpty").prop("checked")) {
                    $(".translationRow").each(function(i, row) {
                        row = $(row);
                        if (row.find("textarea").filter(function() { return $(this).val() == ""; }).length > 0)
                            row.show();
                        else
                            row.hide();
                    });
                }
                updateCount();
            });

            $(".translationTextBox").change(function() {
                $(this).addClass("notDefaultValue");
            });

            $("textarea").keydown(function() {
                updateTextAreaHeight(this);
            });

            $("textarea").click(function() {
                updateTextAreaHeight(this);
            });
            
            $("textarea").blur(function () {
                updateTextAreaHeight(this);
            });

            $("textarea").change(function() {
                var row = $(this).closest(".translationRow");
                unifyTextAreaHeight(row);
            });

            updateCount();
        });
    </script>
}
